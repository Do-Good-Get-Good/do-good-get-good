# This is a basic workflow to help you get started with Actions
name: Do Good Get Good unit tests

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - "*"
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1.4.3
        with:
          java-version: "9.0.4" # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Install dependencies
        run: npm install
        working-directory: src/

      - run: npm test
        working-directory: src/

      - run: |
          find . -name junit.xml
          find . -name result.json
        if: always()

      - uses: dorny/test-reporter@v1
        if: always() # Or use "continue-on-error: true" in previous test step
        with:
          name: JEST Tests # Name of the check run which will be created
          path: ./src/junit.xml # Path to test results
          reporter: jest-junit
          token: ${{ github.token }}
